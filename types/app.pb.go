// Code generated by protoc-gen-gogo.
// source: app.proto
// DO NOT EDIT!

/*
	Package types is a generated protocol buffer package.

	It is generated from these files:
		app.proto
		event.proto
		health.proto
		task.proto

	It has these top-level messages:
		Application
		Container
		Docker
		Parameter
		PortMapping
		Volume
		KillPolicy
		UpdatePolicy
		ApplicationVersion
		Event
		Command
		Check
		HealthCheck
		Task
		PortMappings
*/
package types

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import strconv "strconv"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Application struct {
	ID                string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Instances         int32  `protobuf:"varint,3,opt,name=instances,proto3" json:"instances,omitempty"`
	UpdatedInstances  int32  `protobuf:"varint,4,opt,name=updatedInstances,proto3" json:"updatedInstances,omitempty"`
	RunningInstances  int32  `protobuf:"varint,5,opt,name=runningInstances,proto3" json:"runningInstances,omitempty"`
	RollbackInstances int32  `protobuf:"varint,6,opt,name=rollbackInstances,proto3" json:"rollbackInstances,omitempty"`
	UserId            string `protobuf:"bytes,7,opt,name=userId,proto3" json:"userId,omitempty"`
	ClusterId         string `protobuf:"bytes,8,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Status            string `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	Created           int64  `protobuf:"varint,10,opt,name=created,proto3" json:"created,omitempty"`
	Updated           int64  `protobuf:"varint,11,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (m *Application) Reset()                    { *m = Application{} }
func (m *Application) String() string            { return proto.CompactTextString(m) }
func (*Application) ProtoMessage()               {}
func (*Application) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{0} }

type Container struct {
	Type    string    `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Docker  *Docker   `protobuf:"bytes,2,opt,name=docker" json:"docker,omitempty"`
	Volumes []*Volume `protobuf:"bytes,3,rep,name=volumes" json:"volumes,omitempty"`
}

func (m *Container) Reset()                    { *m = Container{} }
func (m *Container) String() string            { return proto.CompactTextString(m) }
func (*Container) ProtoMessage()               {}
func (*Container) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{1} }

type Docker struct {
	ForcePullImage bool           `protobuf:"varint,1,opt,name=forcePullImage,proto3" json:"forcePullImage,omitempty"`
	Image          string         `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Network        string         `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
	Privileged     bool           `protobuf:"varint,4,opt,name=privileged,proto3" json:"privileged,omitempty"`
	Parameters     []*Parameter   `protobuf:"bytes,5,rep,name=parameters" json:"parameters,omitempty"`
	PortMappings   []*PortMapping `protobuf:"bytes,6,rep,name=portMappings" json:"portMappings,omitempty"`
}

func (m *Docker) Reset()                    { *m = Docker{} }
func (m *Docker) String() string            { return proto.CompactTextString(m) }
func (*Docker) ProtoMessage()               {}
func (*Docker) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{2} }

type Parameter struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Parameter) Reset()                    { *m = Parameter{} }
func (m *Parameter) String() string            { return proto.CompactTextString(m) }
func (*Parameter) ProtoMessage()               {}
func (*Parameter) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{3} }

type PortMapping struct {
	ContainerPort int32  `protobuf:"varint,1,opt,name=containerPort,proto3" json:"containerPort,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Protocol      string `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (m *PortMapping) Reset()                    { *m = PortMapping{} }
func (m *PortMapping) String() string            { return proto.CompactTextString(m) }
func (*PortMapping) ProtoMessage()               {}
func (*PortMapping) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{4} }

type Volume struct {
	ContainerPath string `protobuf:"bytes,1,opt,name=containerPath,proto3" json:"containerPath,omitempty"`
	HostPath      string `protobuf:"bytes,2,opt,name=hostPath,proto3" json:"hostPath,omitempty"`
	Mode          string `protobuf:"bytes,3,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (m *Volume) Reset()                    { *m = Volume{} }
func (m *Volume) String() string            { return proto.CompactTextString(m) }
func (*Volume) ProtoMessage()               {}
func (*Volume) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{5} }

type KillPolicy struct {
	Duration int64 `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *KillPolicy) Reset()                    { *m = KillPolicy{} }
func (m *KillPolicy) String() string            { return proto.CompactTextString(m) }
func (*KillPolicy) ProtoMessage()               {}
func (*KillPolicy) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{6} }

type UpdatePolicy struct {
	UpdateDelay  int32  `protobuf:"varint,1,opt,name=updateDelay,proto3" json:"updateDelay,omitempty"`
	MaxRetries   int32  `protobuf:"varint,2,opt,name=maxRetries,proto3" json:"maxRetries,omitempty"`
	MaxFailovers int32  `protobuf:"varint,3,opt,name=maxFailovers,proto3" json:"maxFailovers,omitempty"`
	Action       string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
}

func (m *UpdatePolicy) Reset()                    { *m = UpdatePolicy{} }
func (m *UpdatePolicy) String() string            { return proto.CompactTextString(m) }
func (*UpdatePolicy) ProtoMessage()               {}
func (*UpdatePolicy) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{7} }

type ApplicationVersion struct {
	ID           string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Command      string            `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	Cpus         float64           `protobuf:"fixed64,3,opt,name=cpus,proto3" json:"cpus,omitempty"`
	Mem          float64           `protobuf:"fixed64,4,opt,name=mem,proto3" json:"mem,omitempty"`
	Disk         float64           `protobuf:"fixed64,5,opt,name=disk,proto3" json:"disk,omitempty"`
	Instances    int32             `protobuf:"varint,6,opt,name=instances,proto3" json:"instances,omitempty"`
	Container    *Container        `protobuf:"bytes,7,opt,name=container" json:"container,omitempty"`
	Labels       map[string]string `protobuf:"bytes,8,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	HealthChecks []*HealthCheck    `protobuf:"bytes,9,rep,name=healthChecks" json:"healthChecks,omitempty"`
	Env          map[string]string `protobuf:"bytes,10,rep,name=env" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	KillPolicy   *KillPolicy       `protobuf:"bytes,11,opt,name=killPolicy" json:"killPolicy,omitempty"`
	UpdatePolicy *UpdatePolicy     `protobuf:"bytes,12,opt,name=updatePolicy" json:"updatePolicy,omitempty"`
	AppID        string            `protobuf:"bytes,13,opt,name=appId,proto3" json:"appId,omitempty"`
}

func (m *ApplicationVersion) Reset()                    { *m = ApplicationVersion{} }
func (m *ApplicationVersion) String() string            { return proto.CompactTextString(m) }
func (*ApplicationVersion) ProtoMessage()               {}
func (*ApplicationVersion) Descriptor() ([]byte, []int) { return fileDescriptorApp, []int{8} }

func init() {
	proto.RegisterType((*Application)(nil), "types.Application")
	proto.RegisterType((*Container)(nil), "types.Container")
	proto.RegisterType((*Docker)(nil), "types.Docker")
	proto.RegisterType((*Parameter)(nil), "types.Parameter")
	proto.RegisterType((*PortMapping)(nil), "types.PortMapping")
	proto.RegisterType((*Volume)(nil), "types.Volume")
	proto.RegisterType((*KillPolicy)(nil), "types.KillPolicy")
	proto.RegisterType((*UpdatePolicy)(nil), "types.UpdatePolicy")
	proto.RegisterType((*ApplicationVersion)(nil), "types.ApplicationVersion")
}
func (this *Application) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Application)
	if !ok {
		that2, ok := that.(Application)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Application")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Application but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Application but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Instances != that1.Instances {
		return fmt.Errorf("Instances this(%v) Not Equal that(%v)", this.Instances, that1.Instances)
	}
	if this.UpdatedInstances != that1.UpdatedInstances {
		return fmt.Errorf("UpdatedInstances this(%v) Not Equal that(%v)", this.UpdatedInstances, that1.UpdatedInstances)
	}
	if this.RunningInstances != that1.RunningInstances {
		return fmt.Errorf("RunningInstances this(%v) Not Equal that(%v)", this.RunningInstances, that1.RunningInstances)
	}
	if this.RollbackInstances != that1.RollbackInstances {
		return fmt.Errorf("RollbackInstances this(%v) Not Equal that(%v)", this.RollbackInstances, that1.RollbackInstances)
	}
	if this.UserId != that1.UserId {
		return fmt.Errorf("UserId this(%v) Not Equal that(%v)", this.UserId, that1.UserId)
	}
	if this.ClusterId != that1.ClusterId {
		return fmt.Errorf("ClusterId this(%v) Not Equal that(%v)", this.ClusterId, that1.ClusterId)
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if this.Created != that1.Created {
		return fmt.Errorf("Created this(%v) Not Equal that(%v)", this.Created, that1.Created)
	}
	if this.Updated != that1.Updated {
		return fmt.Errorf("Updated this(%v) Not Equal that(%v)", this.Updated, that1.Updated)
	}
	return nil
}
func (this *Application) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Application)
	if !ok {
		that2, ok := that.(Application)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Instances != that1.Instances {
		return false
	}
	if this.UpdatedInstances != that1.UpdatedInstances {
		return false
	}
	if this.RunningInstances != that1.RunningInstances {
		return false
	}
	if this.RollbackInstances != that1.RollbackInstances {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.ClusterId != that1.ClusterId {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Created != that1.Created {
		return false
	}
	if this.Updated != that1.Updated {
		return false
	}
	return true
}
func (this *Container) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Container)
	if !ok {
		that2, ok := that.(Container)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Container")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Container but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Container but is not nil && this == nil")
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	if !this.Docker.Equal(that1.Docker) {
		return fmt.Errorf("Docker this(%v) Not Equal that(%v)", this.Docker, that1.Docker)
	}
	if len(this.Volumes) != len(that1.Volumes) {
		return fmt.Errorf("Volumes this(%v) Not Equal that(%v)", len(this.Volumes), len(that1.Volumes))
	}
	for i := range this.Volumes {
		if !this.Volumes[i].Equal(that1.Volumes[i]) {
			return fmt.Errorf("Volumes this[%v](%v) Not Equal that[%v](%v)", i, this.Volumes[i], i, that1.Volumes[i])
		}
	}
	return nil
}
func (this *Container) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Container)
	if !ok {
		that2, ok := that.(Container)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.Docker.Equal(that1.Docker) {
		return false
	}
	if len(this.Volumes) != len(that1.Volumes) {
		return false
	}
	for i := range this.Volumes {
		if !this.Volumes[i].Equal(that1.Volumes[i]) {
			return false
		}
	}
	return true
}
func (this *Docker) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Docker)
	if !ok {
		that2, ok := that.(Docker)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Docker")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Docker but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Docker but is not nil && this == nil")
	}
	if this.ForcePullImage != that1.ForcePullImage {
		return fmt.Errorf("ForcePullImage this(%v) Not Equal that(%v)", this.ForcePullImage, that1.ForcePullImage)
	}
	if this.Image != that1.Image {
		return fmt.Errorf("Image this(%v) Not Equal that(%v)", this.Image, that1.Image)
	}
	if this.Network != that1.Network {
		return fmt.Errorf("Network this(%v) Not Equal that(%v)", this.Network, that1.Network)
	}
	if this.Privileged != that1.Privileged {
		return fmt.Errorf("Privileged this(%v) Not Equal that(%v)", this.Privileged, that1.Privileged)
	}
	if len(this.Parameters) != len(that1.Parameters) {
		return fmt.Errorf("Parameters this(%v) Not Equal that(%v)", len(this.Parameters), len(that1.Parameters))
	}
	for i := range this.Parameters {
		if !this.Parameters[i].Equal(that1.Parameters[i]) {
			return fmt.Errorf("Parameters this[%v](%v) Not Equal that[%v](%v)", i, this.Parameters[i], i, that1.Parameters[i])
		}
	}
	if len(this.PortMappings) != len(that1.PortMappings) {
		return fmt.Errorf("PortMappings this(%v) Not Equal that(%v)", len(this.PortMappings), len(that1.PortMappings))
	}
	for i := range this.PortMappings {
		if !this.PortMappings[i].Equal(that1.PortMappings[i]) {
			return fmt.Errorf("PortMappings this[%v](%v) Not Equal that[%v](%v)", i, this.PortMappings[i], i, that1.PortMappings[i])
		}
	}
	return nil
}
func (this *Docker) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Docker)
	if !ok {
		that2, ok := that.(Docker)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ForcePullImage != that1.ForcePullImage {
		return false
	}
	if this.Image != that1.Image {
		return false
	}
	if this.Network != that1.Network {
		return false
	}
	if this.Privileged != that1.Privileged {
		return false
	}
	if len(this.Parameters) != len(that1.Parameters) {
		return false
	}
	for i := range this.Parameters {
		if !this.Parameters[i].Equal(that1.Parameters[i]) {
			return false
		}
	}
	if len(this.PortMappings) != len(that1.PortMappings) {
		return false
	}
	for i := range this.PortMappings {
		if !this.PortMappings[i].Equal(that1.PortMappings[i]) {
			return false
		}
	}
	return true
}
func (this *Parameter) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Parameter)
	if !ok {
		that2, ok := that.(Parameter)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Parameter")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Parameter but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Parameter but is not nil && this == nil")
	}
	if this.Key != that1.Key {
		return fmt.Errorf("Key this(%v) Not Equal that(%v)", this.Key, that1.Key)
	}
	if this.Value != that1.Value {
		return fmt.Errorf("Value this(%v) Not Equal that(%v)", this.Value, that1.Value)
	}
	return nil
}
func (this *Parameter) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Parameter)
	if !ok {
		that2, ok := that.(Parameter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *PortMapping) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PortMapping)
	if !ok {
		that2, ok := that.(PortMapping)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PortMapping")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PortMapping but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PortMapping but is not nil && this == nil")
	}
	if this.ContainerPort != that1.ContainerPort {
		return fmt.Errorf("ContainerPort this(%v) Not Equal that(%v)", this.ContainerPort, that1.ContainerPort)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Protocol != that1.Protocol {
		return fmt.Errorf("Protocol this(%v) Not Equal that(%v)", this.Protocol, that1.Protocol)
	}
	return nil
}
func (this *PortMapping) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PortMapping)
	if !ok {
		that2, ok := that.(PortMapping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ContainerPort != that1.ContainerPort {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Protocol != that1.Protocol {
		return false
	}
	return true
}
func (this *Volume) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Volume)
	if !ok {
		that2, ok := that.(Volume)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Volume")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Volume but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Volume but is not nil && this == nil")
	}
	if this.ContainerPath != that1.ContainerPath {
		return fmt.Errorf("ContainerPath this(%v) Not Equal that(%v)", this.ContainerPath, that1.ContainerPath)
	}
	if this.HostPath != that1.HostPath {
		return fmt.Errorf("HostPath this(%v) Not Equal that(%v)", this.HostPath, that1.HostPath)
	}
	if this.Mode != that1.Mode {
		return fmt.Errorf("Mode this(%v) Not Equal that(%v)", this.Mode, that1.Mode)
	}
	return nil
}
func (this *Volume) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Volume)
	if !ok {
		that2, ok := that.(Volume)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ContainerPath != that1.ContainerPath {
		return false
	}
	if this.HostPath != that1.HostPath {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	return true
}
func (this *KillPolicy) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*KillPolicy)
	if !ok {
		that2, ok := that.(KillPolicy)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *KillPolicy")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *KillPolicy but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *KillPolicy but is not nil && this == nil")
	}
	if this.Duration != that1.Duration {
		return fmt.Errorf("Duration this(%v) Not Equal that(%v)", this.Duration, that1.Duration)
	}
	return nil
}
func (this *KillPolicy) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*KillPolicy)
	if !ok {
		that2, ok := that.(KillPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	return true
}
func (this *UpdatePolicy) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdatePolicy)
	if !ok {
		that2, ok := that.(UpdatePolicy)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdatePolicy")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdatePolicy but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdatePolicy but is not nil && this == nil")
	}
	if this.UpdateDelay != that1.UpdateDelay {
		return fmt.Errorf("UpdateDelay this(%v) Not Equal that(%v)", this.UpdateDelay, that1.UpdateDelay)
	}
	if this.MaxRetries != that1.MaxRetries {
		return fmt.Errorf("MaxRetries this(%v) Not Equal that(%v)", this.MaxRetries, that1.MaxRetries)
	}
	if this.MaxFailovers != that1.MaxFailovers {
		return fmt.Errorf("MaxFailovers this(%v) Not Equal that(%v)", this.MaxFailovers, that1.MaxFailovers)
	}
	if this.Action != that1.Action {
		return fmt.Errorf("Action this(%v) Not Equal that(%v)", this.Action, that1.Action)
	}
	return nil
}
func (this *UpdatePolicy) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdatePolicy)
	if !ok {
		that2, ok := that.(UpdatePolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.UpdateDelay != that1.UpdateDelay {
		return false
	}
	if this.MaxRetries != that1.MaxRetries {
		return false
	}
	if this.MaxFailovers != that1.MaxFailovers {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	return true
}
func (this *ApplicationVersion) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ApplicationVersion)
	if !ok {
		that2, ok := that.(ApplicationVersion)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ApplicationVersion")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ApplicationVersion but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ApplicationVersion but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if this.Command != that1.Command {
		return fmt.Errorf("Command this(%v) Not Equal that(%v)", this.Command, that1.Command)
	}
	if this.Cpus != that1.Cpus {
		return fmt.Errorf("Cpus this(%v) Not Equal that(%v)", this.Cpus, that1.Cpus)
	}
	if this.Mem != that1.Mem {
		return fmt.Errorf("Mem this(%v) Not Equal that(%v)", this.Mem, that1.Mem)
	}
	if this.Disk != that1.Disk {
		return fmt.Errorf("Disk this(%v) Not Equal that(%v)", this.Disk, that1.Disk)
	}
	if this.Instances != that1.Instances {
		return fmt.Errorf("Instances this(%v) Not Equal that(%v)", this.Instances, that1.Instances)
	}
	if !this.Container.Equal(that1.Container) {
		return fmt.Errorf("Container this(%v) Not Equal that(%v)", this.Container, that1.Container)
	}
	if len(this.Labels) != len(that1.Labels) {
		return fmt.Errorf("Labels this(%v) Not Equal that(%v)", len(this.Labels), len(that1.Labels))
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return fmt.Errorf("Labels this[%v](%v) Not Equal that[%v](%v)", i, this.Labels[i], i, that1.Labels[i])
		}
	}
	if len(this.HealthChecks) != len(that1.HealthChecks) {
		return fmt.Errorf("HealthChecks this(%v) Not Equal that(%v)", len(this.HealthChecks), len(that1.HealthChecks))
	}
	for i := range this.HealthChecks {
		if !this.HealthChecks[i].Equal(that1.HealthChecks[i]) {
			return fmt.Errorf("HealthChecks this[%v](%v) Not Equal that[%v](%v)", i, this.HealthChecks[i], i, that1.HealthChecks[i])
		}
	}
	if len(this.Env) != len(that1.Env) {
		return fmt.Errorf("Env this(%v) Not Equal that(%v)", len(this.Env), len(that1.Env))
	}
	for i := range this.Env {
		if this.Env[i] != that1.Env[i] {
			return fmt.Errorf("Env this[%v](%v) Not Equal that[%v](%v)", i, this.Env[i], i, that1.Env[i])
		}
	}
	if !this.KillPolicy.Equal(that1.KillPolicy) {
		return fmt.Errorf("KillPolicy this(%v) Not Equal that(%v)", this.KillPolicy, that1.KillPolicy)
	}
	if !this.UpdatePolicy.Equal(that1.UpdatePolicy) {
		return fmt.Errorf("UpdatePolicy this(%v) Not Equal that(%v)", this.UpdatePolicy, that1.UpdatePolicy)
	}
	if this.AppID != that1.AppID {
		return fmt.Errorf("AppID this(%v) Not Equal that(%v)", this.AppID, that1.AppID)
	}
	return nil
}
func (this *ApplicationVersion) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ApplicationVersion)
	if !ok {
		that2, ok := that.(ApplicationVersion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Command != that1.Command {
		return false
	}
	if this.Cpus != that1.Cpus {
		return false
	}
	if this.Mem != that1.Mem {
		return false
	}
	if this.Disk != that1.Disk {
		return false
	}
	if this.Instances != that1.Instances {
		return false
	}
	if !this.Container.Equal(that1.Container) {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if len(this.HealthChecks) != len(that1.HealthChecks) {
		return false
	}
	for i := range this.HealthChecks {
		if !this.HealthChecks[i].Equal(that1.HealthChecks[i]) {
			return false
		}
	}
	if len(this.Env) != len(that1.Env) {
		return false
	}
	for i := range this.Env {
		if this.Env[i] != that1.Env[i] {
			return false
		}
	}
	if !this.KillPolicy.Equal(that1.KillPolicy) {
		return false
	}
	if !this.UpdatePolicy.Equal(that1.UpdatePolicy) {
		return false
	}
	if this.AppID != that1.AppID {
		return false
	}
	return true
}
func (this *Application) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&types.Application{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Instances: "+fmt.Sprintf("%#v", this.Instances)+",\n")
	s = append(s, "UpdatedInstances: "+fmt.Sprintf("%#v", this.UpdatedInstances)+",\n")
	s = append(s, "RunningInstances: "+fmt.Sprintf("%#v", this.RunningInstances)+",\n")
	s = append(s, "RollbackInstances: "+fmt.Sprintf("%#v", this.RollbackInstances)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "ClusterId: "+fmt.Sprintf("%#v", this.ClusterId)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Created: "+fmt.Sprintf("%#v", this.Created)+",\n")
	s = append(s, "Updated: "+fmt.Sprintf("%#v", this.Updated)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Container) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&types.Container{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Docker != nil {
		s = append(s, "Docker: "+fmt.Sprintf("%#v", this.Docker)+",\n")
	}
	if this.Volumes != nil {
		s = append(s, "Volumes: "+fmt.Sprintf("%#v", this.Volumes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Docker) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&types.Docker{")
	s = append(s, "ForcePullImage: "+fmt.Sprintf("%#v", this.ForcePullImage)+",\n")
	s = append(s, "Image: "+fmt.Sprintf("%#v", this.Image)+",\n")
	s = append(s, "Network: "+fmt.Sprintf("%#v", this.Network)+",\n")
	s = append(s, "Privileged: "+fmt.Sprintf("%#v", this.Privileged)+",\n")
	if this.Parameters != nil {
		s = append(s, "Parameters: "+fmt.Sprintf("%#v", this.Parameters)+",\n")
	}
	if this.PortMappings != nil {
		s = append(s, "PortMappings: "+fmt.Sprintf("%#v", this.PortMappings)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Parameter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&types.Parameter{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PortMapping) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&types.PortMapping{")
	s = append(s, "ContainerPort: "+fmt.Sprintf("%#v", this.ContainerPort)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Volume) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&types.Volume{")
	s = append(s, "ContainerPath: "+fmt.Sprintf("%#v", this.ContainerPath)+",\n")
	s = append(s, "HostPath: "+fmt.Sprintf("%#v", this.HostPath)+",\n")
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KillPolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&types.KillPolicy{")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdatePolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&types.UpdatePolicy{")
	s = append(s, "UpdateDelay: "+fmt.Sprintf("%#v", this.UpdateDelay)+",\n")
	s = append(s, "MaxRetries: "+fmt.Sprintf("%#v", this.MaxRetries)+",\n")
	s = append(s, "MaxFailovers: "+fmt.Sprintf("%#v", this.MaxFailovers)+",\n")
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApplicationVersion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&types.ApplicationVersion{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Command: "+fmt.Sprintf("%#v", this.Command)+",\n")
	s = append(s, "Cpus: "+fmt.Sprintf("%#v", this.Cpus)+",\n")
	s = append(s, "Mem: "+fmt.Sprintf("%#v", this.Mem)+",\n")
	s = append(s, "Disk: "+fmt.Sprintf("%#v", this.Disk)+",\n")
	s = append(s, "Instances: "+fmt.Sprintf("%#v", this.Instances)+",\n")
	if this.Container != nil {
		s = append(s, "Container: "+fmt.Sprintf("%#v", this.Container)+",\n")
	}
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%#v: %#v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	if this.Labels != nil {
		s = append(s, "Labels: "+mapStringForLabels+",\n")
	}
	if this.HealthChecks != nil {
		s = append(s, "HealthChecks: "+fmt.Sprintf("%#v", this.HealthChecks)+",\n")
	}
	keysForEnv := make([]string, 0, len(this.Env))
	for k, _ := range this.Env {
		keysForEnv = append(keysForEnv, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEnv)
	mapStringForEnv := "map[string]string{"
	for _, k := range keysForEnv {
		mapStringForEnv += fmt.Sprintf("%#v: %#v,", k, this.Env[k])
	}
	mapStringForEnv += "}"
	if this.Env != nil {
		s = append(s, "Env: "+mapStringForEnv+",\n")
	}
	if this.KillPolicy != nil {
		s = append(s, "KillPolicy: "+fmt.Sprintf("%#v", this.KillPolicy)+",\n")
	}
	if this.UpdatePolicy != nil {
		s = append(s, "UpdatePolicy: "+fmt.Sprintf("%#v", this.UpdatePolicy)+",\n")
	}
	s = append(s, "AppID: "+fmt.Sprintf("%#v", this.AppID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringApp(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringApp(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func (m *Application) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Application) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Instances != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.Instances))
	}
	if m.UpdatedInstances != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.UpdatedInstances))
	}
	if m.RunningInstances != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.RunningInstances))
	}
	if m.RollbackInstances != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.RollbackInstances))
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if len(m.ClusterId) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.ClusterId)))
		i += copy(dAtA[i:], m.ClusterId)
	}
	if len(m.Status) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	if m.Created != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.Created))
	}
	if m.Updated != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.Updated))
	}
	return i, nil
}

func (m *Container) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Container) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Docker != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.Docker.Size()))
		n1, err := m.Docker.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Volumes) > 0 {
		for _, msg := range m.Volumes {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintApp(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Docker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Docker) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ForcePullImage {
		dAtA[i] = 0x8
		i++
		if m.ForcePullImage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Image) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if len(m.Network) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Network)))
		i += copy(dAtA[i:], m.Network)
	}
	if m.Privileged {
		dAtA[i] = 0x20
		i++
		if m.Privileged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Parameters) > 0 {
		for _, msg := range m.Parameters {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintApp(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PortMappings) > 0 {
		for _, msg := range m.PortMappings {
			dAtA[i] = 0x32
			i++
			i = encodeVarintApp(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Parameter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Parameter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *PortMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortMapping) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ContainerPort != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.ContainerPort))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Protocol) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Protocol)))
		i += copy(dAtA[i:], m.Protocol)
	}
	return i, nil
}

func (m *Volume) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Volume) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContainerPath) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.ContainerPath)))
		i += copy(dAtA[i:], m.ContainerPath)
	}
	if len(m.HostPath) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.HostPath)))
		i += copy(dAtA[i:], m.HostPath)
	}
	if len(m.Mode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Mode)))
		i += copy(dAtA[i:], m.Mode)
	}
	return i, nil
}

func (m *KillPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KillPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.Duration))
	}
	return i, nil
}

func (m *UpdatePolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UpdateDelay != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.UpdateDelay))
	}
	if m.MaxRetries != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.MaxRetries))
	}
	if m.MaxFailovers != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.MaxFailovers))
	}
	if len(m.Action) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Action)))
		i += copy(dAtA[i:], m.Action)
	}
	return i, nil
}

func (m *ApplicationVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationVersion) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Command) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Command)))
		i += copy(dAtA[i:], m.Command)
	}
	if m.Cpus != 0 {
		dAtA[i] = 0x19
		i++
		i = encodeFixed64App(dAtA, i, uint64(math.Float64bits(float64(m.Cpus))))
	}
	if m.Mem != 0 {
		dAtA[i] = 0x21
		i++
		i = encodeFixed64App(dAtA, i, uint64(math.Float64bits(float64(m.Mem))))
	}
	if m.Disk != 0 {
		dAtA[i] = 0x29
		i++
		i = encodeFixed64App(dAtA, i, uint64(math.Float64bits(float64(m.Disk))))
	}
	if m.Instances != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.Instances))
	}
	if m.Container != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.Container.Size()))
		n2, err := m.Container.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Labels) > 0 {
		for k, _ := range m.Labels {
			dAtA[i] = 0x42
			i++
			v := m.Labels[k]
			mapSize := 1 + len(k) + sovApp(uint64(len(k))) + 1 + len(v) + sovApp(uint64(len(v)))
			i = encodeVarintApp(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintApp(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintApp(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.HealthChecks) > 0 {
		for _, msg := range m.HealthChecks {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintApp(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Env) > 0 {
		for k, _ := range m.Env {
			dAtA[i] = 0x52
			i++
			v := m.Env[k]
			mapSize := 1 + len(k) + sovApp(uint64(len(k))) + 1 + len(v) + sovApp(uint64(len(v)))
			i = encodeVarintApp(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintApp(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintApp(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.KillPolicy != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.KillPolicy.Size()))
		n3, err := m.KillPolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.UpdatePolicy != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.UpdatePolicy.Size()))
		n4, err := m.UpdatePolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.AppID) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.AppID)))
		i += copy(dAtA[i:], m.AppID)
	}
	return i, nil
}

func encodeFixed64App(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32App(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintApp(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedApplication(r randyApp, easy bool) *Application {
	this := &Application{}
	this.ID = string(randStringApp(r))
	this.Name = string(randStringApp(r))
	this.Instances = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Instances *= -1
	}
	this.UpdatedInstances = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.UpdatedInstances *= -1
	}
	this.RunningInstances = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.RunningInstances *= -1
	}
	this.RollbackInstances = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.RollbackInstances *= -1
	}
	this.UserId = string(randStringApp(r))
	this.ClusterId = string(randStringApp(r))
	this.Status = string(randStringApp(r))
	this.Created = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Created *= -1
	}
	this.Updated = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Updated *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedContainer(r randyApp, easy bool) *Container {
	this := &Container{}
	this.Type = string(randStringApp(r))
	if r.Intn(10) != 0 {
		this.Docker = NewPopulatedDocker(r, easy)
	}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Volumes = make([]*Volume, v1)
		for i := 0; i < v1; i++ {
			this.Volumes[i] = NewPopulatedVolume(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDocker(r randyApp, easy bool) *Docker {
	this := &Docker{}
	this.ForcePullImage = bool(bool(r.Intn(2) == 0))
	this.Image = string(randStringApp(r))
	this.Network = string(randStringApp(r))
	this.Privileged = bool(bool(r.Intn(2) == 0))
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Parameters = make([]*Parameter, v2)
		for i := 0; i < v2; i++ {
			this.Parameters[i] = NewPopulatedParameter(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.PortMappings = make([]*PortMapping, v3)
		for i := 0; i < v3; i++ {
			this.PortMappings[i] = NewPopulatedPortMapping(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedParameter(r randyApp, easy bool) *Parameter {
	this := &Parameter{}
	this.Key = string(randStringApp(r))
	this.Value = string(randStringApp(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPortMapping(r randyApp, easy bool) *PortMapping {
	this := &PortMapping{}
	this.ContainerPort = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.ContainerPort *= -1
	}
	this.Name = string(randStringApp(r))
	this.Protocol = string(randStringApp(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedVolume(r randyApp, easy bool) *Volume {
	this := &Volume{}
	this.ContainerPath = string(randStringApp(r))
	this.HostPath = string(randStringApp(r))
	this.Mode = string(randStringApp(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedKillPolicy(r randyApp, easy bool) *KillPolicy {
	this := &KillPolicy{}
	this.Duration = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Duration *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdatePolicy(r randyApp, easy bool) *UpdatePolicy {
	this := &UpdatePolicy{}
	this.UpdateDelay = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.UpdateDelay *= -1
	}
	this.MaxRetries = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.MaxRetries *= -1
	}
	this.MaxFailovers = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.MaxFailovers *= -1
	}
	this.Action = string(randStringApp(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplicationVersion(r randyApp, easy bool) *ApplicationVersion {
	this := &ApplicationVersion{}
	this.ID = string(randStringApp(r))
	this.Command = string(randStringApp(r))
	this.Cpus = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Cpus *= -1
	}
	this.Mem = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Mem *= -1
	}
	this.Disk = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Disk *= -1
	}
	this.Instances = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Instances *= -1
	}
	if r.Intn(10) != 0 {
		this.Container = NewPopulatedContainer(r, easy)
	}
	if r.Intn(10) != 0 {
		v4 := r.Intn(10)
		this.Labels = make(map[string]string)
		for i := 0; i < v4; i++ {
			this.Labels[randStringApp(r)] = randStringApp(r)
		}
	}
	if r.Intn(10) != 0 {
		v5 := r.Intn(5)
		this.HealthChecks = make([]*HealthCheck, v5)
		for i := 0; i < v5; i++ {
			this.HealthChecks[i] = NewPopulatedHealthCheck(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v6 := r.Intn(10)
		this.Env = make(map[string]string)
		for i := 0; i < v6; i++ {
			this.Env[randStringApp(r)] = randStringApp(r)
		}
	}
	if r.Intn(10) != 0 {
		this.KillPolicy = NewPopulatedKillPolicy(r, easy)
	}
	if r.Intn(10) != 0 {
		this.UpdatePolicy = NewPopulatedUpdatePolicy(r, easy)
	}
	this.AppID = string(randStringApp(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyApp interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneApp(r randyApp) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringApp(r randyApp) string {
	v7 := r.Intn(100)
	tmps := make([]rune, v7)
	for i := 0; i < v7; i++ {
		tmps[i] = randUTF8RuneApp(r)
	}
	return string(tmps)
}
func randUnrecognizedApp(r randyApp, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldApp(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldApp(dAtA []byte, r randyApp, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateApp(dAtA, uint64(key))
		v8 := r.Int63()
		if r.Intn(2) == 0 {
			v8 *= -1
		}
		dAtA = encodeVarintPopulateApp(dAtA, uint64(v8))
	case 1:
		dAtA = encodeVarintPopulateApp(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateApp(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateApp(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateApp(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateApp(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Application) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	if m.Instances != 0 {
		n += 1 + sovApp(uint64(m.Instances))
	}
	if m.UpdatedInstances != 0 {
		n += 1 + sovApp(uint64(m.UpdatedInstances))
	}
	if m.RunningInstances != 0 {
		n += 1 + sovApp(uint64(m.RunningInstances))
	}
	if m.RollbackInstances != 0 {
		n += 1 + sovApp(uint64(m.RollbackInstances))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	if m.Created != 0 {
		n += 1 + sovApp(uint64(m.Created))
	}
	if m.Updated != 0 {
		n += 1 + sovApp(uint64(m.Updated))
	}
	return n
}

func (m *Container) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	if m.Docker != nil {
		l = m.Docker.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if len(m.Volumes) > 0 {
		for _, e := range m.Volumes {
			l = e.Size()
			n += 1 + l + sovApp(uint64(l))
		}
	}
	return n
}

func (m *Docker) Size() (n int) {
	var l int
	_ = l
	if m.ForcePullImage {
		n += 2
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Network)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	if m.Privileged {
		n += 2
	}
	if len(m.Parameters) > 0 {
		for _, e := range m.Parameters {
			l = e.Size()
			n += 1 + l + sovApp(uint64(l))
		}
	}
	if len(m.PortMappings) > 0 {
		for _, e := range m.PortMappings {
			l = e.Size()
			n += 1 + l + sovApp(uint64(l))
		}
	}
	return n
}

func (m *Parameter) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *PortMapping) Size() (n int) {
	var l int
	_ = l
	if m.ContainerPort != 0 {
		n += 1 + sovApp(uint64(m.ContainerPort))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *Volume) Size() (n int) {
	var l int
	_ = l
	l = len(m.ContainerPath)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.HostPath)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Mode)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *KillPolicy) Size() (n int) {
	var l int
	_ = l
	if m.Duration != 0 {
		n += 1 + sovApp(uint64(m.Duration))
	}
	return n
}

func (m *UpdatePolicy) Size() (n int) {
	var l int
	_ = l
	if m.UpdateDelay != 0 {
		n += 1 + sovApp(uint64(m.UpdateDelay))
	}
	if m.MaxRetries != 0 {
		n += 1 + sovApp(uint64(m.MaxRetries))
	}
	if m.MaxFailovers != 0 {
		n += 1 + sovApp(uint64(m.MaxFailovers))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *ApplicationVersion) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	if m.Cpus != 0 {
		n += 9
	}
	if m.Mem != 0 {
		n += 9
	}
	if m.Disk != 0 {
		n += 9
	}
	if m.Instances != 0 {
		n += 1 + sovApp(uint64(m.Instances))
	}
	if m.Container != nil {
		l = m.Container.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApp(uint64(len(k))) + 1 + len(v) + sovApp(uint64(len(v)))
			n += mapEntrySize + 1 + sovApp(uint64(mapEntrySize))
		}
	}
	if len(m.HealthChecks) > 0 {
		for _, e := range m.HealthChecks {
			l = e.Size()
			n += 1 + l + sovApp(uint64(l))
		}
	}
	if len(m.Env) > 0 {
		for k, v := range m.Env {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApp(uint64(len(k))) + 1 + len(v) + sovApp(uint64(len(v)))
			n += mapEntrySize + 1 + sovApp(uint64(mapEntrySize))
		}
	}
	if m.KillPolicy != nil {
		l = m.KillPolicy.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	if m.UpdatePolicy != nil {
		l = m.UpdatePolicy.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.AppID)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func sovApp(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApp(x uint64) (n int) {
	return sovApp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Application) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Application: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Application: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instances", wireType)
			}
			m.Instances = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Instances |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedInstances", wireType)
			}
			m.UpdatedInstances = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedInstances |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunningInstances", wireType)
			}
			m.RunningInstances = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RunningInstances |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollbackInstances", wireType)
			}
			m.RollbackInstances = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RollbackInstances |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			m.Updated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Updated |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Container) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Container: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Container: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Docker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Docker == nil {
				m.Docker = &Docker{}
			}
			if err := m.Docker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volumes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Volumes = append(m.Volumes, &Volume{})
			if err := m.Volumes[len(m.Volumes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Docker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Docker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Docker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForcePullImage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForcePullImage = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privileged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Privileged = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameters = append(m.Parameters, &Parameter{})
			if err := m.Parameters[len(m.Parameters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortMappings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortMappings = append(m.PortMappings, &PortMapping{})
			if err := m.PortMappings[len(m.PortMappings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Parameter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Parameter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Parameter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerPort", wireType)
			}
			m.ContainerPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContainerPort |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Volume) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Volume: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Volume: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KillPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateDelay", wireType)
			}
			m.UpdateDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateDelay |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRetries", wireType)
			}
			m.MaxRetries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRetries |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFailovers", wireType)
			}
			m.MaxFailovers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxFailovers |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpus", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Cpus = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mem", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Mem = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disk", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Disk = float64(math.Float64frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instances", wireType)
			}
			m.Instances = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Instances |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Container", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Container == nil {
				m.Container = &Container{}
			}
			if err := m.Container.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthApp
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApp
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApp
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthApp
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Labels[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Labels[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthChecks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HealthChecks = append(m.HealthChecks, &HealthCheck{})
			if err := m.HealthChecks[len(m.HealthChecks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthApp
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Env == nil {
				m.Env = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApp
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApp
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthApp
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Env[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Env[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KillPolicy == nil {
				m.KillPolicy = &KillPolicy{}
			}
			if err := m.KillPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatePolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatePolicy == nil {
				m.UpdatePolicy = &UpdatePolicy{}
			}
			if err := m.UpdatePolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApp
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApp
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApp(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApp = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApp   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("app.proto", fileDescriptorApp) }

var fileDescriptorApp = []byte{
	// 868 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x8e, 0xdc, 0x44,
	0x10, 0xc6, 0xf3, 0xe3, 0xdd, 0xa9, 0x99, 0x45, 0x9b, 0x06, 0x21, 0x6b, 0x84, 0x36, 0x91, 0x95,
	0x40, 0x84, 0x60, 0x02, 0x09, 0x0a, 0x3f, 0x12, 0x07, 0x92, 0x0d, 0x62, 0x04, 0x48, 0xab, 0x96,
	0xc8, 0x11, 0xa9, 0xc7, 0xee, 0xcc, 0x58, 0xd3, 0x76, 0x5b, 0xfe, 0x19, 0x98, 0x77, 0xe0, 0x41,
	0x78, 0x04, 0x1e, 0x21, 0x47, 0x9e, 0x00, 0x92, 0x1c, 0x39, 0x71, 0x44, 0xe2, 0x42, 0x57, 0x75,
	0x7b, 0x6c, 0xef, 0x02, 0x22, 0x87, 0x96, 0xba, 0xea, 0xfb, 0xaa, 0xbb, 0xfe, 0x61, 0x22, 0xf2,
	0x7c, 0x91, 0x17, 0xba, 0xd2, 0x6c, 0x5c, 0xed, 0x73, 0x59, 0xce, 0xdf, 0x5b, 0x27, 0xd5, 0xa6,
	0x5e, 0x2d, 0x22, 0x9d, 0xde, 0x59, 0xeb, 0xb5, 0xbe, 0x43, 0xe8, 0xaa, 0x7e, 0x42, 0x12, 0x09,
	0x74, 0xb3, 0x56, 0xf3, 0xd9, 0x46, 0x0a, 0x55, 0x6d, 0xac, 0x14, 0xfe, 0x36, 0x80, 0xe9, 0xe7,
	0x79, 0xae, 0x92, 0x48, 0x54, 0x89, 0xce, 0xd8, 0x1b, 0x30, 0x48, 0xe2, 0xc0, 0xbb, 0xe1, 0xdd,
	0x9e, 0x3c, 0xf0, 0x5f, 0xfc, 0x7a, 0x7d, 0xb0, 0x3c, 0xe7, 0x46, 0xc3, 0x18, 0x8c, 0x32, 0x91,
	0xca, 0x60, 0x80, 0x08, 0xa7, 0x3b, 0x7b, 0x13, 0x26, 0x49, 0x56, 0x56, 0x22, 0x8b, 0x64, 0x19,
	0x0c, 0x0d, 0x30, 0xe6, 0xad, 0x82, 0xbd, 0x03, 0xa7, 0x75, 0x1e, 0x8b, 0x4a, 0xc6, 0xcb, 0x03,
	0x69, 0x44, 0xa4, 0x2b, 0x7a, 0xe4, 0x16, 0x75, 0x96, 0x25, 0xd9, 0xba, 0xe5, 0x8e, 0x2d, 0xf7,
	0xb2, 0x9e, 0xbd, 0x0b, 0xd7, 0x0a, 0xad, 0xd4, 0x4a, 0x44, 0xdb, 0x96, 0xec, 0x13, 0xf9, 0x2a,
	0x60, 0xe2, 0xf1, 0xeb, 0x52, 0x16, 0xcb, 0x38, 0x38, 0x22, 0xcf, 0x9d, 0x84, 0xbe, 0x47, 0xaa,
	0x2e, 0x2b, 0x82, 0x8e, 0x09, 0x6a, 0x15, 0x68, 0x65, 0x1e, 0xa8, 0xea, 0x32, 0x98, 0x58, 0x2b,
	0x2b, 0xb1, 0x00, 0x8e, 0xa2, 0x42, 0xa2, 0xef, 0x01, 0x18, 0x60, 0xc8, 0x1b, 0x11, 0x11, 0x17,
	0x55, 0x30, 0xb5, 0x88, 0x13, 0x43, 0x0d, 0x93, 0x87, 0x3a, 0xab, 0x44, 0x92, 0xc9, 0x02, 0xd3,
	0x88, 0x45, 0xb3, 0x09, 0xe6, 0x74, 0x67, 0xb7, 0xc0, 0x8f, 0x75, 0xb4, 0x95, 0x05, 0x25, 0x77,
	0x7a, 0xf7, 0x64, 0x41, 0x75, 0x5d, 0x9c, 0x93, 0x92, 0x3b, 0x90, 0xbd, 0x0d, 0x47, 0x3b, 0xad,
	0xea, 0x94, 0x72, 0x3d, 0xec, 0xf0, 0x1e, 0x93, 0x96, 0x37, 0x68, 0xf8, 0xbb, 0x07, 0xbe, 0xb5,
	0x65, 0x6f, 0xc1, 0xab, 0x4f, 0x74, 0x11, 0xc9, 0x8b, 0x5a, 0xa9, 0x65, 0x2a, 0xd6, 0xf6, 0xe3,
	0x63, 0x7e, 0x49, 0xcb, 0x5e, 0x87, 0x71, 0x42, 0xb0, 0x2d, 0xaf, 0x15, 0x30, 0xa6, 0x4c, 0x56,
	0xdf, 0xeb, 0x62, 0x4b, 0xd5, 0x9d, 0xf0, 0x46, 0x64, 0x67, 0x00, 0x79, 0x91, 0xec, 0x12, 0x25,
	0xd7, 0x26, 0xe0, 0x11, 0xbd, 0xd9, 0xd1, 0xb0, 0xf7, 0x0d, 0x2e, 0x0a, 0xd3, 0x23, 0x26, 0x9d,
	0x58, 0x49, 0x74, 0xf7, 0xd4, 0xb9, 0x7b, 0xd1, 0x00, 0xbc, 0xc3, 0x61, 0xf7, 0x61, 0x96, 0xeb,
	0xa2, 0xfa, 0xc6, 0x74, 0xb7, 0xa9, 0x36, 0x16, 0x14, 0x6d, 0x58, 0x63, 0xd3, 0x42, 0xbc, 0xc7,
	0x0b, 0xef, 0xc1, 0xe4, 0xf0, 0x20, 0x3b, 0x85, 0xe1, 0x56, 0xee, 0x5d, 0x72, 0xf1, 0x8a, 0x81,
	0xed, 0x84, 0xaa, 0x0f, 0x81, 0x91, 0x10, 0x46, 0x30, 0xed, 0xbc, 0xc8, 0x6e, 0xc2, 0x49, 0xd4,
	0x54, 0x08, 0xf5, 0xf4, 0xc0, 0x98, 0xf7, 0x95, 0xff, 0x38, 0x01, 0x73, 0x38, 0xa6, 0x31, 0x8a,
	0xb4, 0x72, 0x29, 0x3a, 0xc8, 0xe1, 0x77, 0xe0, 0xdb, 0xca, 0xf4, 0xdf, 0x17, 0xd5, 0xc6, 0x39,
	0xd8, 0x57, 0xe2, 0x5b, 0x1b, 0x5d, 0x56, 0x44, 0xb0, 0x7f, 0x1c, 0x64, 0xfc, 0x3b, 0xd5, 0xb1,
	0x74, 0x7f, 0xd0, 0x3d, 0xbc, 0x0d, 0xf0, 0x55, 0xa2, 0xd4, 0x85, 0x36, 0xb3, 0xbb, 0x47, 0xeb,
	0xb8, 0x2e, 0x68, 0x86, 0xe9, 0xf9, 0x21, 0x3f, 0xc8, 0xe1, 0x8f, 0x1e, 0xcc, 0xbe, 0xa5, 0x6e,
	0x74, 0xe4, 0x1b, 0x30, 0xb5, 0xdd, 0x79, 0x2e, 0x95, 0xd8, 0xbb, 0x70, 0xbb, 0x2a, 0x2c, 0x70,
	0x2a, 0x7e, 0xe0, 0xb2, 0x2a, 0x12, 0xd3, 0x6f, 0x03, 0x22, 0x74, 0x34, 0x2c, 0x84, 0x99, 0x91,
	0xbe, 0x10, 0x89, 0xd2, 0x3b, 0x2c, 0xb1, 0x9d, 0xfe, 0x9e, 0x0e, 0x87, 0x48, 0x44, 0xe4, 0xd0,
	0xc8, 0x0e, 0x91, 0x95, 0xc2, 0xbf, 0x46, 0xc0, 0x3a, 0x2b, 0xe7, 0xb1, 0xe1, 0xfe, 0xd7, 0xe6,
	0xc1, 0x99, 0xd3, 0x69, 0x2a, 0xb2, 0xd8, 0xa5, 0xa5, 0x11, 0x31, 0x2b, 0x51, 0x5e, 0xdb, 0xcf,
	0x3d, 0x4e, 0x77, 0x6c, 0x81, 0x54, 0xa6, 0xf4, 0xa3, 0xc7, 0xf1, 0x8a, 0xac, 0x38, 0x29, 0xb7,
	0xb4, 0x4f, 0x0c, 0x0b, 0xef, 0xfd, 0xcd, 0xe5, 0x5f, 0xde, 0x5c, 0x0b, 0xb3, 0x1b, 0x9a, 0xd2,
	0xd0, 0xda, 0x68, 0x9b, 0xf7, 0x30, 0xc9, 0xbc, 0xa5, 0xb0, 0xcf, 0xc0, 0x57, 0x62, 0x25, 0x55,
	0x69, 0x16, 0x09, 0x76, 0xed, 0x2d, 0x47, 0xbe, 0x1a, 0xe4, 0xe2, 0x6b, 0xe2, 0x3d, 0xca, 0xaa,
	0x62, 0xcf, 0x9d, 0x11, 0xb6, 0xbe, 0x5d, 0xc9, 0x0f, 0x37, 0x32, 0xda, 0xe2, 0xca, 0xe9, 0xb6,
	0xfe, 0x97, 0x2d, 0xc4, 0x7b, 0x3c, 0xf6, 0x21, 0x0c, 0x65, 0xb6, 0x33, 0x8b, 0x08, 0xe9, 0xe1,
	0xbf, 0xff, 0xf9, 0x28, 0xdb, 0xd9, 0x0f, 0x91, 0xce, 0x3e, 0x00, 0xd8, 0x1e, 0xda, 0x86, 0x76,
	0xd5, 0xf4, 0xee, 0x35, 0x67, 0xdc, 0xf6, 0x13, 0xef, 0x90, 0xd8, 0x47, 0x30, 0xab, 0x3b, 0xed,
	0x13, 0xcc, 0xc8, 0xe8, 0x35, 0x67, 0xd4, 0xed, 0x2c, 0xde, 0x23, 0xb2, 0xeb, 0x30, 0x36, 0x23,
	0x66, 0x16, 0xec, 0x09, 0x55, 0x75, 0x62, 0xaa, 0x3a, 0x36, 0x0e, 0x9a, 0xc2, 0x5a, 0xfd, 0xfc,
	0x13, 0x98, 0x76, 0x32, 0xf2, 0x7f, 0xe7, 0xf7, 0xd3, 0xc1, 0xc7, 0xde, 0xfc, 0x3e, 0x1c, 0x37,
	0x81, 0xbd, 0x8c, 0xdd, 0x83, 0x9b, 0x4f, 0x9f, 0x9f, 0xbd, 0xf2, 0xec, 0xf9, 0x99, 0xf7, 0x87,
	0x39, 0x7f, 0x9a, 0xf3, 0xd3, 0x8b, 0x33, 0xef, 0x67, 0x73, 0x9e, 0x9a, 0xf3, 0x8b, 0x39, 0xcf,
	0xcc, 0x59, 0xf9, 0x34, 0xc6, 0xf7, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x6c, 0xb8, 0xaa, 0xee,
	0x6e, 0x07, 0x00, 0x00,
}
