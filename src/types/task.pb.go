// Code generated by protoc-gen-gogo.
// source: task.proto
// DO NOT EDIT!

package types

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// skipping weak import gogoproto "gogoproto"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import strconv "strconv"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Task struct {
	ID             string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Command        string            `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
	Cpus           float64           `protobuf:"fixed64,4,opt,name=cpus,proto3" json:"cpus,omitempty"`
	Disk           float64           `protobuf:"fixed64,5,opt,name=disk,proto3" json:"disk,omitempty"`
	Mem            float64           `protobuf:"fixed64,6,opt,name=mem,proto3" json:"mem,omitempty"`
	Image          string            `protobuf:"bytes,7,opt,name=image,proto3" json:"image,omitempty"`
	Network        string            `protobuf:"bytes,8,opt,name=network,proto3" json:"network,omitempty"`
	PortMappings   []*PortMappings   `protobuf:"bytes,9,rep,name=portMappings" json:"portMappings,omitempty"`
	Privileged     bool              `protobuf:"varint,10,opt,name=privileged,proto3" json:"privileged,omitempty"`
	Parameters     []*Parameter      `protobuf:"bytes,11,rep,name=parameters" json:"parameters,omitempty"`
	ForcePullImage bool              `protobuf:"varint,12,opt,name=forcePullImage,proto3" json:"forcePullImage,omitempty"`
	Volumes        []*Volume         `protobuf:"bytes,13,rep,name=volumes" json:"volumes,omitempty"`
	Env            map[string]string `protobuf:"bytes,14,rep,name=env" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Labels         map[string]string `protobuf:"bytes,15,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	HealthChecks   []*HealthCheck    `protobuf:"bytes,16,rep,name=healthChecks" json:"healthChecks,omitempty"`
	OfferId        string            `protobuf:"bytes,17,opt,name=offerId,proto3" json:"offerId,omitempty"`
	AgentId        string            `protobuf:"bytes,18,opt,name=agentId,proto3" json:"agentId,omitempty"`
	AgentHostname  string            `protobuf:"bytes,19,opt,name=agentHostname,proto3" json:"agentHostname,omitempty"`
	Status         string            `protobuf:"bytes,20,opt,name=status,proto3" json:"status,omitempty"`
	AppId          string            `protobuf:"bytes,21,opt,name=appId,proto3" json:"appId,omitempty"`
	KillPolicy     *KillPolicy       `protobuf:"bytes,22,opt,name=killPolicy" json:"killPolicy,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{0} }

type PortMappings struct {
	Port     uint32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Protocol string `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (m *PortMappings) Reset()                    { *m = PortMappings{} }
func (m *PortMappings) String() string            { return proto.CompactTextString(m) }
func (*PortMappings) ProtoMessage()               {}
func (*PortMappings) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{1} }

func init() {
	proto.RegisterType((*Task)(nil), "types.Task")
	proto.RegisterType((*PortMappings)(nil), "types.PortMappings")
}
func (this *Task) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Task)
	if !ok {
		that2, ok := that.(Task)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Task")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Task but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Task but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Command != that1.Command {
		return fmt.Errorf("Command this(%v) Not Equal that(%v)", this.Command, that1.Command)
	}
	if this.Cpus != that1.Cpus {
		return fmt.Errorf("Cpus this(%v) Not Equal that(%v)", this.Cpus, that1.Cpus)
	}
	if this.Disk != that1.Disk {
		return fmt.Errorf("Disk this(%v) Not Equal that(%v)", this.Disk, that1.Disk)
	}
	if this.Mem != that1.Mem {
		return fmt.Errorf("Mem this(%v) Not Equal that(%v)", this.Mem, that1.Mem)
	}
	if this.Image != that1.Image {
		return fmt.Errorf("Image this(%v) Not Equal that(%v)", this.Image, that1.Image)
	}
	if this.Network != that1.Network {
		return fmt.Errorf("Network this(%v) Not Equal that(%v)", this.Network, that1.Network)
	}
	if len(this.PortMappings) != len(that1.PortMappings) {
		return fmt.Errorf("PortMappings this(%v) Not Equal that(%v)", len(this.PortMappings), len(that1.PortMappings))
	}
	for i := range this.PortMappings {
		if !this.PortMappings[i].Equal(that1.PortMappings[i]) {
			return fmt.Errorf("PortMappings this[%v](%v) Not Equal that[%v](%v)", i, this.PortMappings[i], i, that1.PortMappings[i])
		}
	}
	if this.Privileged != that1.Privileged {
		return fmt.Errorf("Privileged this(%v) Not Equal that(%v)", this.Privileged, that1.Privileged)
	}
	if len(this.Parameters) != len(that1.Parameters) {
		return fmt.Errorf("Parameters this(%v) Not Equal that(%v)", len(this.Parameters), len(that1.Parameters))
	}
	for i := range this.Parameters {
		if !this.Parameters[i].Equal(that1.Parameters[i]) {
			return fmt.Errorf("Parameters this[%v](%v) Not Equal that[%v](%v)", i, this.Parameters[i], i, that1.Parameters[i])
		}
	}
	if this.ForcePullImage != that1.ForcePullImage {
		return fmt.Errorf("ForcePullImage this(%v) Not Equal that(%v)", this.ForcePullImage, that1.ForcePullImage)
	}
	if len(this.Volumes) != len(that1.Volumes) {
		return fmt.Errorf("Volumes this(%v) Not Equal that(%v)", len(this.Volumes), len(that1.Volumes))
	}
	for i := range this.Volumes {
		if !this.Volumes[i].Equal(that1.Volumes[i]) {
			return fmt.Errorf("Volumes this[%v](%v) Not Equal that[%v](%v)", i, this.Volumes[i], i, that1.Volumes[i])
		}
	}
	if len(this.Env) != len(that1.Env) {
		return fmt.Errorf("Env this(%v) Not Equal that(%v)", len(this.Env), len(that1.Env))
	}
	for i := range this.Env {
		if this.Env[i] != that1.Env[i] {
			return fmt.Errorf("Env this[%v](%v) Not Equal that[%v](%v)", i, this.Env[i], i, that1.Env[i])
		}
	}
	if len(this.Labels) != len(that1.Labels) {
		return fmt.Errorf("Labels this(%v) Not Equal that(%v)", len(this.Labels), len(that1.Labels))
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return fmt.Errorf("Labels this[%v](%v) Not Equal that[%v](%v)", i, this.Labels[i], i, that1.Labels[i])
		}
	}
	if len(this.HealthChecks) != len(that1.HealthChecks) {
		return fmt.Errorf("HealthChecks this(%v) Not Equal that(%v)", len(this.HealthChecks), len(that1.HealthChecks))
	}
	for i := range this.HealthChecks {
		if !this.HealthChecks[i].Equal(that1.HealthChecks[i]) {
			return fmt.Errorf("HealthChecks this[%v](%v) Not Equal that[%v](%v)", i, this.HealthChecks[i], i, that1.HealthChecks[i])
		}
	}
	if this.OfferId != that1.OfferId {
		return fmt.Errorf("OfferId this(%v) Not Equal that(%v)", this.OfferId, that1.OfferId)
	}
	if this.AgentId != that1.AgentId {
		return fmt.Errorf("AgentId this(%v) Not Equal that(%v)", this.AgentId, that1.AgentId)
	}
	if this.AgentHostname != that1.AgentHostname {
		return fmt.Errorf("AgentHostname this(%v) Not Equal that(%v)", this.AgentHostname, that1.AgentHostname)
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if this.AppId != that1.AppId {
		return fmt.Errorf("AppId this(%v) Not Equal that(%v)", this.AppId, that1.AppId)
	}
	if !this.KillPolicy.Equal(that1.KillPolicy) {
		return fmt.Errorf("KillPolicy this(%v) Not Equal that(%v)", this.KillPolicy, that1.KillPolicy)
	}
	return nil
}
func (this *Task) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Task)
	if !ok {
		that2, ok := that.(Task)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Command != that1.Command {
		return false
	}
	if this.Cpus != that1.Cpus {
		return false
	}
	if this.Disk != that1.Disk {
		return false
	}
	if this.Mem != that1.Mem {
		return false
	}
	if this.Image != that1.Image {
		return false
	}
	if this.Network != that1.Network {
		return false
	}
	if len(this.PortMappings) != len(that1.PortMappings) {
		return false
	}
	for i := range this.PortMappings {
		if !this.PortMappings[i].Equal(that1.PortMappings[i]) {
			return false
		}
	}
	if this.Privileged != that1.Privileged {
		return false
	}
	if len(this.Parameters) != len(that1.Parameters) {
		return false
	}
	for i := range this.Parameters {
		if !this.Parameters[i].Equal(that1.Parameters[i]) {
			return false
		}
	}
	if this.ForcePullImage != that1.ForcePullImage {
		return false
	}
	if len(this.Volumes) != len(that1.Volumes) {
		return false
	}
	for i := range this.Volumes {
		if !this.Volumes[i].Equal(that1.Volumes[i]) {
			return false
		}
	}
	if len(this.Env) != len(that1.Env) {
		return false
	}
	for i := range this.Env {
		if this.Env[i] != that1.Env[i] {
			return false
		}
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if len(this.HealthChecks) != len(that1.HealthChecks) {
		return false
	}
	for i := range this.HealthChecks {
		if !this.HealthChecks[i].Equal(that1.HealthChecks[i]) {
			return false
		}
	}
	if this.OfferId != that1.OfferId {
		return false
	}
	if this.AgentId != that1.AgentId {
		return false
	}
	if this.AgentHostname != that1.AgentHostname {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.AppId != that1.AppId {
		return false
	}
	if !this.KillPolicy.Equal(that1.KillPolicy) {
		return false
	}
	return true
}
func (this *PortMappings) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PortMappings)
	if !ok {
		that2, ok := that.(PortMappings)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PortMappings")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PortMappings but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PortMappings but is not nil && this == nil")
	}
	if this.Port != that1.Port {
		return fmt.Errorf("Port this(%v) Not Equal that(%v)", this.Port, that1.Port)
	}
	if this.Protocol != that1.Protocol {
		return fmt.Errorf("Protocol this(%v) Not Equal that(%v)", this.Protocol, that1.Protocol)
	}
	return nil
}
func (this *PortMappings) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PortMappings)
	if !ok {
		that2, ok := that.(PortMappings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if this.Protocol != that1.Protocol {
		return false
	}
	return true
}
func (this *Task) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 26)
	s = append(s, "&types.Task{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Command: "+fmt.Sprintf("%#v", this.Command)+",\n")
	s = append(s, "Cpus: "+fmt.Sprintf("%#v", this.Cpus)+",\n")
	s = append(s, "Disk: "+fmt.Sprintf("%#v", this.Disk)+",\n")
	s = append(s, "Mem: "+fmt.Sprintf("%#v", this.Mem)+",\n")
	s = append(s, "Image: "+fmt.Sprintf("%#v", this.Image)+",\n")
	s = append(s, "Network: "+fmt.Sprintf("%#v", this.Network)+",\n")
	if this.PortMappings != nil {
		s = append(s, "PortMappings: "+fmt.Sprintf("%#v", this.PortMappings)+",\n")
	}
	s = append(s, "Privileged: "+fmt.Sprintf("%#v", this.Privileged)+",\n")
	if this.Parameters != nil {
		s = append(s, "Parameters: "+fmt.Sprintf("%#v", this.Parameters)+",\n")
	}
	s = append(s, "ForcePullImage: "+fmt.Sprintf("%#v", this.ForcePullImage)+",\n")
	if this.Volumes != nil {
		s = append(s, "Volumes: "+fmt.Sprintf("%#v", this.Volumes)+",\n")
	}
	keysForEnv := make([]string, 0, len(this.Env))
	for k, _ := range this.Env {
		keysForEnv = append(keysForEnv, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEnv)
	mapStringForEnv := "map[string]string{"
	for _, k := range keysForEnv {
		mapStringForEnv += fmt.Sprintf("%#v: %#v,", k, this.Env[k])
	}
	mapStringForEnv += "}"
	if this.Env != nil {
		s = append(s, "Env: "+mapStringForEnv+",\n")
	}
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%#v: %#v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	if this.Labels != nil {
		s = append(s, "Labels: "+mapStringForLabels+",\n")
	}
	if this.HealthChecks != nil {
		s = append(s, "HealthChecks: "+fmt.Sprintf("%#v", this.HealthChecks)+",\n")
	}
	s = append(s, "OfferId: "+fmt.Sprintf("%#v", this.OfferId)+",\n")
	s = append(s, "AgentId: "+fmt.Sprintf("%#v", this.AgentId)+",\n")
	s = append(s, "AgentHostname: "+fmt.Sprintf("%#v", this.AgentHostname)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "AppId: "+fmt.Sprintf("%#v", this.AppId)+",\n")
	if this.KillPolicy != nil {
		s = append(s, "KillPolicy: "+fmt.Sprintf("%#v", this.KillPolicy)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PortMappings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&types.PortMappings{")
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTask(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringTask(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func (m *Task) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Task) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintTask(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintTask(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Command) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintTask(data, i, uint64(len(m.Command)))
		i += copy(data[i:], m.Command)
	}
	if m.Cpus != 0 {
		data[i] = 0x21
		i++
		i = encodeFixed64Task(data, i, uint64(math.Float64bits(float64(m.Cpus))))
	}
	if m.Disk != 0 {
		data[i] = 0x29
		i++
		i = encodeFixed64Task(data, i, uint64(math.Float64bits(float64(m.Disk))))
	}
	if m.Mem != 0 {
		data[i] = 0x31
		i++
		i = encodeFixed64Task(data, i, uint64(math.Float64bits(float64(m.Mem))))
	}
	if len(m.Image) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintTask(data, i, uint64(len(m.Image)))
		i += copy(data[i:], m.Image)
	}
	if len(m.Network) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintTask(data, i, uint64(len(m.Network)))
		i += copy(data[i:], m.Network)
	}
	if len(m.PortMappings) > 0 {
		for _, msg := range m.PortMappings {
			data[i] = 0x4a
			i++
			i = encodeVarintTask(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Privileged {
		data[i] = 0x50
		i++
		if m.Privileged {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.Parameters) > 0 {
		for _, msg := range m.Parameters {
			data[i] = 0x5a
			i++
			i = encodeVarintTask(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ForcePullImage {
		data[i] = 0x60
		i++
		if m.ForcePullImage {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.Volumes) > 0 {
		for _, msg := range m.Volumes {
			data[i] = 0x6a
			i++
			i = encodeVarintTask(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Env) > 0 {
		for k, _ := range m.Env {
			data[i] = 0x72
			i++
			v := m.Env[k]
			mapSize := 1 + len(k) + sovTask(uint64(len(k))) + 1 + len(v) + sovTask(uint64(len(v)))
			i = encodeVarintTask(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintTask(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintTask(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	if len(m.Labels) > 0 {
		for k, _ := range m.Labels {
			data[i] = 0x7a
			i++
			v := m.Labels[k]
			mapSize := 1 + len(k) + sovTask(uint64(len(k))) + 1 + len(v) + sovTask(uint64(len(v)))
			i = encodeVarintTask(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintTask(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintTask(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	if len(m.HealthChecks) > 0 {
		for _, msg := range m.HealthChecks {
			data[i] = 0x82
			i++
			data[i] = 0x1
			i++
			i = encodeVarintTask(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.OfferId) > 0 {
		data[i] = 0x8a
		i++
		data[i] = 0x1
		i++
		i = encodeVarintTask(data, i, uint64(len(m.OfferId)))
		i += copy(data[i:], m.OfferId)
	}
	if len(m.AgentId) > 0 {
		data[i] = 0x92
		i++
		data[i] = 0x1
		i++
		i = encodeVarintTask(data, i, uint64(len(m.AgentId)))
		i += copy(data[i:], m.AgentId)
	}
	if len(m.AgentHostname) > 0 {
		data[i] = 0x9a
		i++
		data[i] = 0x1
		i++
		i = encodeVarintTask(data, i, uint64(len(m.AgentHostname)))
		i += copy(data[i:], m.AgentHostname)
	}
	if len(m.Status) > 0 {
		data[i] = 0xa2
		i++
		data[i] = 0x1
		i++
		i = encodeVarintTask(data, i, uint64(len(m.Status)))
		i += copy(data[i:], m.Status)
	}
	if len(m.AppId) > 0 {
		data[i] = 0xaa
		i++
		data[i] = 0x1
		i++
		i = encodeVarintTask(data, i, uint64(len(m.AppId)))
		i += copy(data[i:], m.AppId)
	}
	if m.KillPolicy != nil {
		data[i] = 0xb2
		i++
		data[i] = 0x1
		i++
		i = encodeVarintTask(data, i, uint64(m.KillPolicy.Size()))
		n1, err := m.KillPolicy.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *PortMappings) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PortMappings) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Port != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintTask(data, i, uint64(m.Port))
	}
	if len(m.Protocol) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintTask(data, i, uint64(len(m.Protocol)))
		i += copy(data[i:], m.Protocol)
	}
	return i, nil
}

func encodeFixed64Task(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Task(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTask(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedTask(r randyTask, easy bool) *Task {
	this := &Task{}
	this.ID = randStringTask(r)
	this.Name = randStringTask(r)
	this.Command = randStringTask(r)
	this.Cpus = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Cpus *= -1
	}
	this.Disk = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Disk *= -1
	}
	this.Mem = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Mem *= -1
	}
	this.Image = randStringTask(r)
	this.Network = randStringTask(r)
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.PortMappings = make([]*PortMappings, v1)
		for i := 0; i < v1; i++ {
			this.PortMappings[i] = NewPopulatedPortMappings(r, easy)
		}
	}
	this.Privileged = bool(bool(r.Intn(2) == 0))
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Parameters = make([]*Parameter, v2)
		for i := 0; i < v2; i++ {
			this.Parameters[i] = NewPopulatedParameter(r, easy)
		}
	}
	this.ForcePullImage = bool(bool(r.Intn(2) == 0))
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.Volumes = make([]*Volume, v3)
		for i := 0; i < v3; i++ {
			this.Volumes[i] = NewPopulatedVolume(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v4 := r.Intn(10)
		this.Env = make(map[string]string)
		for i := 0; i < v4; i++ {
			this.Env[randStringTask(r)] = randStringTask(r)
		}
	}
	if r.Intn(10) != 0 {
		v5 := r.Intn(10)
		this.Labels = make(map[string]string)
		for i := 0; i < v5; i++ {
			this.Labels[randStringTask(r)] = randStringTask(r)
		}
	}
	if r.Intn(10) != 0 {
		v6 := r.Intn(5)
		this.HealthChecks = make([]*HealthCheck, v6)
		for i := 0; i < v6; i++ {
			this.HealthChecks[i] = NewPopulatedHealthCheck(r, easy)
		}
	}
	this.OfferId = randStringTask(r)
	this.AgentId = randStringTask(r)
	this.AgentHostname = randStringTask(r)
	this.Status = randStringTask(r)
	this.AppId = randStringTask(r)
	if r.Intn(10) != 0 {
		this.KillPolicy = NewPopulatedKillPolicy(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPortMappings(r randyTask, easy bool) *PortMappings {
	this := &PortMappings{}
	this.Port = uint32(r.Uint32())
	this.Protocol = randStringTask(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyTask interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTask(r randyTask) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTask(r randyTask) string {
	v7 := r.Intn(100)
	tmps := make([]rune, v7)
	for i := 0; i < v7; i++ {
		tmps[i] = randUTF8RuneTask(r)
	}
	return string(tmps)
}
func randUnrecognizedTask(r randyTask, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldTask(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldTask(data []byte, r randyTask, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateTask(data, uint64(key))
		v8 := r.Int63()
		if r.Intn(2) == 0 {
			v8 *= -1
		}
		data = encodeVarintPopulateTask(data, uint64(v8))
	case 1:
		data = encodeVarintPopulateTask(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateTask(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateTask(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateTask(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateTask(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *Task) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.Cpus != 0 {
		n += 9
	}
	if m.Disk != 0 {
		n += 9
	}
	if m.Mem != 0 {
		n += 9
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.Network)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if len(m.PortMappings) > 0 {
		for _, e := range m.PortMappings {
			l = e.Size()
			n += 1 + l + sovTask(uint64(l))
		}
	}
	if m.Privileged {
		n += 2
	}
	if len(m.Parameters) > 0 {
		for _, e := range m.Parameters {
			l = e.Size()
			n += 1 + l + sovTask(uint64(l))
		}
	}
	if m.ForcePullImage {
		n += 2
	}
	if len(m.Volumes) > 0 {
		for _, e := range m.Volumes {
			l = e.Size()
			n += 1 + l + sovTask(uint64(l))
		}
	}
	if len(m.Env) > 0 {
		for k, v := range m.Env {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTask(uint64(len(k))) + 1 + len(v) + sovTask(uint64(len(v)))
			n += mapEntrySize + 1 + sovTask(uint64(mapEntrySize))
		}
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTask(uint64(len(k))) + 1 + len(v) + sovTask(uint64(len(v)))
			n += mapEntrySize + 1 + sovTask(uint64(mapEntrySize))
		}
	}
	if len(m.HealthChecks) > 0 {
		for _, e := range m.HealthChecks {
			l = e.Size()
			n += 2 + l + sovTask(uint64(l))
		}
	}
	l = len(m.OfferId)
	if l > 0 {
		n += 2 + l + sovTask(uint64(l))
	}
	l = len(m.AgentId)
	if l > 0 {
		n += 2 + l + sovTask(uint64(l))
	}
	l = len(m.AgentHostname)
	if l > 0 {
		n += 2 + l + sovTask(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 2 + l + sovTask(uint64(l))
	}
	l = len(m.AppId)
	if l > 0 {
		n += 2 + l + sovTask(uint64(l))
	}
	if m.KillPolicy != nil {
		l = m.KillPolicy.Size()
		n += 2 + l + sovTask(uint64(l))
	}
	return n
}

func (m *PortMappings) Size() (n int) {
	var l int
	_ = l
	if m.Port != 0 {
		n += 1 + sovTask(uint64(m.Port))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	return n
}

func sovTask(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTask(x uint64) (n int) {
	return sovTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Task) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpus", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Cpus = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disk", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Disk = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mem", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Mem = float64(math.Float64frombits(v))
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortMappings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortMappings = append(m.PortMappings, &PortMappings{})
			if err := m.PortMappings[len(m.PortMappings)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privileged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Privileged = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameters = append(m.Parameters, &Parameter{})
			if err := m.Parameters[len(m.Parameters)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForcePullImage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForcePullImage = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volumes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Volumes = append(m.Volumes, &Volume{})
			if err := m.Volumes[len(m.Volumes)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthTask
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Env == nil {
				m.Env = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthTask
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(data[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Env[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Env[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthTask
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthTask
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(data[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Labels[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Labels[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthChecks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HealthChecks = append(m.HealthChecks, &HealthCheck{})
			if err := m.HealthChecks[len(m.HealthChecks)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfferId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OfferId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentHostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentHostname = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KillPolicy == nil {
				m.KillPolicy = &KillPolicy{}
			}
			if err := m.KillPolicy.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortMappings) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortMappings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortMappings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Port |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTask(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTask
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTask
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTask(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTask = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTask   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("task.proto", fileDescriptorTask) }

var fileDescriptorTask = []byte{
	// 570 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x53, 0xcf, 0x6e, 0xd3, 0x30,
	0x18, 0x5f, 0xda, 0x35, 0xed, 0xbe, 0xb6, 0xa3, 0xf3, 0xca, 0xb0, 0x7a, 0x28, 0xd3, 0x34, 0xc1,
	0x4e, 0x1d, 0x0c, 0x69, 0xfc, 0x39, 0x70, 0x18, 0x4c, 0x5a, 0x05, 0x48, 0x95, 0x85, 0x10, 0xd7,
	0x2c, 0x75, 0xdb, 0x28, 0x4e, 0x1c, 0x25, 0x6e, 0x50, 0xdf, 0x88, 0x47, 0xe0, 0x11, 0x76, 0x84,
	0x17, 0x40, 0xdb, 0x9e, 0x80, 0x23, 0x47, 0xec, 0x2f, 0xce, 0x48, 0xb9, 0x71, 0xf8, 0xa4, 0xef,
	0xf7, 0xc7, 0x3f, 0xc7, 0xf6, 0x17, 0x00, 0xe5, 0x65, 0xe1, 0x28, 0x49, 0xa5, 0x92, 0xa4, 0xa1,
	0x56, 0x09, 0xcf, 0x06, 0xfd, 0xb9, 0x9c, 0x4b, 0x64, 0x8e, 0x4d, 0x57, 0x88, 0x83, 0x6e, 0xce,
	0xd3, 0x2c, 0x90, 0xb1, 0x85, 0x9d, 0x05, 0xf7, 0x84, 0x5a, 0x14, 0xe8, 0xe0, 0x87, 0x0b, 0x9b,
	0x1f, 0x75, 0x10, 0xd9, 0x83, 0x5a, 0x30, 0xa5, 0xce, 0xbe, 0x73, 0xb4, 0x75, 0xe6, 0xde, 0xfe,
	0x7c, 0x58, 0x1b, 0xbf, 0x65, 0x9a, 0x21, 0x04, 0x36, 0x63, 0x2f, 0xe2, 0xb4, 0x66, 0x14, 0x86,
	0x3d, 0xa1, 0xd0, 0xf4, 0x65, 0x14, 0x79, 0xf1, 0x94, 0xd6, 0x91, 0x2e, 0xa1, 0x71, 0xfb, 0xc9,
	0x32, 0xa3, 0x9b, 0x9a, 0x76, 0x18, 0xf6, 0x86, 0x9b, 0x06, 0x59, 0x48, 0x1b, 0x05, 0x67, 0x7a,
	0xd2, 0x83, 0x7a, 0xc4, 0x23, 0xea, 0x22, 0x65, 0x5a, 0xd2, 0x87, 0x46, 0x10, 0x79, 0x73, 0x4e,
	0x9b, 0x98, 0x58, 0x00, 0xb3, 0x53, 0xcc, 0xd5, 0x17, 0x99, 0x86, 0xb4, 0x55, 0xec, 0x64, 0x21,
	0x79, 0x0e, 0x9d, 0x44, 0xa6, 0xea, 0x83, 0x97, 0x24, 0x41, 0x3c, 0xcf, 0xe8, 0xd6, 0x7e, 0xfd,
	0xa8, 0x7d, 0xb2, 0x3b, 0xc2, 0x9b, 0x18, 0x4d, 0x2a, 0x12, 0x5b, 0x33, 0x92, 0x21, 0x40, 0x92,
	0x06, 0x79, 0x20, 0xf8, 0x9c, 0x4f, 0x29, 0xe8, 0xd4, 0x16, 0xab, 0x30, 0xe4, 0x89, 0xd6, 0xbd,
	0x54, 0x1f, 0x53, 0xe9, 0x6b, 0xa3, 0x6d, 0x8c, 0xed, 0x95, 0xb1, 0xa5, 0xc0, 0x2a, 0x1e, 0xf2,
	0x08, 0xb6, 0x67, 0x32, 0xf5, 0xf9, 0x64, 0x29, 0xc4, 0x18, 0xcf, 0xd0, 0xc1, 0xd4, 0x7f, 0x58,
	0xf2, 0x18, 0x9a, 0xb9, 0x14, 0xcb, 0x88, 0x67, 0xb4, 0x8b, 0xb1, 0x5d, 0x1b, 0xfb, 0x09, 0x59,
	0x56, 0xaa, 0x3a, 0xb0, 0xce, 0xe3, 0x9c, 0x6e, 0xa3, 0xa9, 0x6f, 0x4d, 0xe6, 0x95, 0x46, 0xe7,
	0x71, 0x7e, 0x1e, 0xab, 0x74, 0xc5, 0x8c, 0x81, 0x1c, 0x83, 0x2b, 0xbc, 0x4b, 0x2e, 0x32, 0x7a,
	0x0f, 0xad, 0x0f, 0xaa, 0xd6, 0xf7, 0xa8, 0x14, 0x6e, 0x6b, 0x23, 0xa7, 0x60, 0x5f, 0xff, 0xcd,
	0x82, 0xfb, 0x61, 0x46, 0x7b, 0xb8, 0x8c, 0xd8, 0x65, 0x17, 0x7f, 0x25, 0xb6, 0xe6, 0x33, 0xcf,
	0x20, 0x67, 0x33, 0x9e, 0x8e, 0xa7, 0x74, 0xa7, 0x78, 0x06, 0x0b, 0x8d, 0xa2, 0x8f, 0x16, 0x2b,
	0xad, 0x90, 0x42, 0xb1, 0x90, 0x1c, 0x42, 0x17, 0xdb, 0x0b, 0x99, 0x29, 0x9c, 0xa0, 0x5d, 0xd4,
	0xd7, 0x49, 0x3d, 0x76, 0x6e, 0xa6, 0x3c, 0xa5, 0x47, 0xa6, 0x8f, 0xb2, 0x45, 0x66, 0x1c, 0xf4,
	0x83, 0xe9, 0xd4, 0xfb, 0xc5, 0x38, 0x20, 0x20, 0x4f, 0x01, 0xc2, 0x40, 0x88, 0x89, 0x14, 0x81,
	0xbf, 0xa2, 0x7b, 0x5a, 0x6a, 0x9f, 0xec, 0xd8, 0xaf, 0x7f, 0x77, 0x27, 0xb0, 0x8a, 0x69, 0x70,
	0x0a, 0xad, 0xf2, 0xd2, 0xcc, 0xd4, 0x85, 0x7c, 0x55, 0x0c, 0x39, 0x33, 0xad, 0xd9, 0x26, 0xf7,
	0xc4, 0xb2, 0x1c, 0xef, 0x02, 0xbc, 0xaa, 0xbd, 0x70, 0x06, 0x2f, 0xa1, 0x5d, 0xb9, 0xc1, 0xff,
	0x59, 0x7a, 0xf0, 0x1a, 0x3a, 0xd5, 0xf9, 0x33, 0x3f, 0x80, 0x99, 0x40, 0x5c, 0xdc, 0x65, 0xd8,
	0x93, 0x01, 0xb4, 0xf0, 0x07, 0xf4, 0xa5, 0xb0, 0x01, 0x77, 0xf8, 0xec, 0xf0, 0xea, 0x66, 0xb8,
	0x71, 0x7d, 0x33, 0x74, 0x7e, 0xe9, 0xfa, 0xad, 0xeb, 0xeb, 0xed, 0xd0, 0xf9, 0xa6, 0xeb, 0x4a,
	0xd7, 0x77, 0x5d, 0xd7, 0xba, 0x3e, 0x6f, 0x5c, 0xba, 0xb8, 0xe2, 0xd9, 0x9f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xe5, 0x67, 0x48, 0x09, 0x0a, 0x04, 0x00, 0x00,
}
