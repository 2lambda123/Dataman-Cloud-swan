// Code generated by protoc-gen-gogo.
// source: application.proto
// DO NOT EDIT!

/*
	Package types is a generated protocol buffer package.

	It is generated from these files:
		application.proto
		health.proto
		raft.proto
		task.proto
		update.proto
		version.proto

	It has these top-level messages:
		Application
		HealthCheck
		Command
		InternalRaftRequest
		StoreAction
		Framework
		Task
		PortMappings
		UpdatePolicy
		Version
		Container
		Docker
		Parameter
		PortMapping
		Volume
		KillPolicy
*/
package types

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// skipping weak import gogoproto "gogoproto"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import strconv "strconv"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Application struct {
	ID                string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Instances         uint64 `protobuf:"varint,3,opt,name=instances,proto3" json:"instances,omitempty"`
	UpdatedInstances  uint64 `protobuf:"varint,4,opt,name=updatedInstances,proto3" json:"updatedInstances,omitempty"`
	RunningInstances  uint64 `protobuf:"varint,5,opt,name=runningInstances,proto3" json:"runningInstances,omitempty"`
	RollbackInstances uint64 `protobuf:"varint,6,opt,name=rollbackInstances,proto3" json:"rollbackInstances,omitempty"`
	RunAs             string `protobuf:"bytes,7,opt,name=runAs,proto3" json:"runAs,omitempty"`
	ClusterId         string `protobuf:"bytes,8,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Status            string `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	Created           int64  `protobuf:"varint,10,opt,name=created,proto3" json:"created,omitempty"`
	Updated           int64  `protobuf:"varint,11,opt,name=updated,proto3" json:"updated,omitempty"`
	Mode              string `protobuf:"bytes,12,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (m *Application) Reset()                    { *m = Application{} }
func (m *Application) String() string            { return proto.CompactTextString(m) }
func (*Application) ProtoMessage()               {}
func (*Application) Descriptor() ([]byte, []int) { return fileDescriptorApplication, []int{0} }

func init() {
	proto.RegisterType((*Application)(nil), "types.Application")
}
func (this *Application) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Application)
	if !ok {
		that2, ok := that.(Application)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Application")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Application but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Application but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Instances != that1.Instances {
		return fmt.Errorf("Instances this(%v) Not Equal that(%v)", this.Instances, that1.Instances)
	}
	if this.UpdatedInstances != that1.UpdatedInstances {
		return fmt.Errorf("UpdatedInstances this(%v) Not Equal that(%v)", this.UpdatedInstances, that1.UpdatedInstances)
	}
	if this.RunningInstances != that1.RunningInstances {
		return fmt.Errorf("RunningInstances this(%v) Not Equal that(%v)", this.RunningInstances, that1.RunningInstances)
	}
	if this.RollbackInstances != that1.RollbackInstances {
		return fmt.Errorf("RollbackInstances this(%v) Not Equal that(%v)", this.RollbackInstances, that1.RollbackInstances)
	}
	if this.RunAs != that1.RunAs {
		return fmt.Errorf("RunAs this(%v) Not Equal that(%v)", this.RunAs, that1.RunAs)
	}
	if this.ClusterId != that1.ClusterId {
		return fmt.Errorf("ClusterId this(%v) Not Equal that(%v)", this.ClusterId, that1.ClusterId)
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if this.Created != that1.Created {
		return fmt.Errorf("Created this(%v) Not Equal that(%v)", this.Created, that1.Created)
	}
	if this.Updated != that1.Updated {
		return fmt.Errorf("Updated this(%v) Not Equal that(%v)", this.Updated, that1.Updated)
	}
	if this.Mode != that1.Mode {
		return fmt.Errorf("Mode this(%v) Not Equal that(%v)", this.Mode, that1.Mode)
	}
	return nil
}
func (this *Application) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Application)
	if !ok {
		that2, ok := that.(Application)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Instances != that1.Instances {
		return false
	}
	if this.UpdatedInstances != that1.UpdatedInstances {
		return false
	}
	if this.RunningInstances != that1.RunningInstances {
		return false
	}
	if this.RollbackInstances != that1.RollbackInstances {
		return false
	}
	if this.RunAs != that1.RunAs {
		return false
	}
	if this.ClusterId != that1.ClusterId {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Created != that1.Created {
		return false
	}
	if this.Updated != that1.Updated {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	return true
}
func (this *Application) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&types.Application{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Instances: "+fmt.Sprintf("%#v", this.Instances)+",\n")
	s = append(s, "UpdatedInstances: "+fmt.Sprintf("%#v", this.UpdatedInstances)+",\n")
	s = append(s, "RunningInstances: "+fmt.Sprintf("%#v", this.RunningInstances)+",\n")
	s = append(s, "RollbackInstances: "+fmt.Sprintf("%#v", this.RollbackInstances)+",\n")
	s = append(s, "RunAs: "+fmt.Sprintf("%#v", this.RunAs)+",\n")
	s = append(s, "ClusterId: "+fmt.Sprintf("%#v", this.ClusterId)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Created: "+fmt.Sprintf("%#v", this.Created)+",\n")
	s = append(s, "Updated: "+fmt.Sprintf("%#v", this.Updated)+",\n")
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringApplication(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringApplication(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func (m *Application) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Application) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if m.Instances != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintApplication(data, i, uint64(m.Instances))
	}
	if m.UpdatedInstances != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintApplication(data, i, uint64(m.UpdatedInstances))
	}
	if m.RunningInstances != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintApplication(data, i, uint64(m.RunningInstances))
	}
	if m.RollbackInstances != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintApplication(data, i, uint64(m.RollbackInstances))
	}
	if len(m.RunAs) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.RunAs)))
		i += copy(data[i:], m.RunAs)
	}
	if len(m.ClusterId) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.ClusterId)))
		i += copy(data[i:], m.ClusterId)
	}
	if len(m.Status) > 0 {
		data[i] = 0x4a
		i++
		i = encodeVarintApplication(data, i, uint64(len(m.Status)))
		i += copy(data[i:], m.Status)
	}
	if m.Created != 0 {
		data[i] = 0x50
		i++
		i = encodeVarintApplication(data, i, uint64(m.Created))
	}
	if m.Updated != 0 {
		data[i] = 0x58
		i++
		i = encodeVarintApplication(data, i, uint64(m.Updated))
	}
	if len(m.Mode) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintApplication(dAtA, i, uint64(len(m.Mode)))
		i += copy(dAtA[i:], m.Mode)
	}
	return i, nil
}

func encodeFixed64Application(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Application(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintApplication(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedApplication(r randyApplication, easy bool) *Application {
	this := &Application{}
	this.ID = randStringApplication(r)
	this.Name = randStringApplication(r)
	this.Instances = uint64(uint64(r.Uint32()))
	this.UpdatedInstances = uint64(uint64(r.Uint32()))
	this.RunningInstances = uint64(uint64(r.Uint32()))
	this.RollbackInstances = uint64(uint64(r.Uint32()))
	this.RunAs = randStringApplication(r)
	this.ClusterId = randStringApplication(r)
	this.Status = randStringApplication(r)
	this.Created = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Created *= -1
	}
	this.Updated = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Updated *= -1
	}
	this.Mode = string(randStringApplication(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyApplication interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneApplication(r randyApplication) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringApplication(r randyApplication) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneApplication(r)
	}
	return string(tmps)
}
func randUnrecognizedApplication(r randyApplication, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldApplication(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldApplication(data []byte, r randyApplication, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateApplication(data, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		data = encodeVarintPopulateApplication(data, uint64(v2))
	case 1:
		data = encodeVarintPopulateApplication(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateApplication(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateApplication(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateApplication(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateApplication(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *Application) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	if m.Instances != 0 {
		n += 1 + sovApplication(uint64(m.Instances))
	}
	if m.UpdatedInstances != 0 {
		n += 1 + sovApplication(uint64(m.UpdatedInstances))
	}
	if m.RunningInstances != 0 {
		n += 1 + sovApplication(uint64(m.RunningInstances))
	}
	if m.RollbackInstances != 0 {
		n += 1 + sovApplication(uint64(m.RollbackInstances))
	}
	l = len(m.RunAs)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	if m.Created != 0 {
		n += 1 + sovApplication(uint64(m.Created))
	}
	if m.Updated != 0 {
		n += 1 + sovApplication(uint64(m.Updated))
	}
	l = len(m.Mode)
	if l > 0 {
		n += 1 + l + sovApplication(uint64(l))
	}
	return n
}

func sovApplication(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApplication(x uint64) (n int) {
	return sovApplication(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Application) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Application: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Application: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instances", wireType)
			}
			m.Instances = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Instances |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedInstances", wireType)
			}
			m.UpdatedInstances = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.UpdatedInstances |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunningInstances", wireType)
			}
			m.RunningInstances = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.RunningInstances |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollbackInstances", wireType)
			}
			m.RollbackInstances = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.RollbackInstances |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunAs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunAs = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Created |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			m.Updated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Updated |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApplication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplication(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApplication(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApplication
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApplication
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApplication
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApplication
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApplication(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApplication = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApplication   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("application.proto", fileDescriptorApplication) }

var fileDescriptorApplication = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x91, 0xb1, 0x4e, 0xfb, 0x30,
	0x10, 0xc6, 0x9b, 0x34, 0x49, 0xff, 0x71, 0xff, 0x03, 0xb5, 0x2a, 0x74, 0x42, 0x28, 0x20, 0xc4,
	0x80, 0x10, 0x82, 0x81, 0x27, 0x68, 0xc5, 0x92, 0x35, 0x13, 0xab, 0x9b, 0x58, 0x51, 0x44, 0x6a,
	0x47, 0xb1, 0x33, 0xf0, 0x46, 0x3c, 0x02, 0x8f, 0xd0, 0x91, 0x27, 0x40, 0x6d, 0x9f, 0x00, 0x36,
	0x46, 0xce, 0x4e, 0xc0, 0x12, 0x1d, 0x3e, 0xe9, 0xee, 0xfb, 0x7d, 0x17, 0x5d, 0xce, 0x64, 0xc6,
	0x9a, 0xa6, 0xae, 0x72, 0xa6, 0x2b, 0x29, 0x6e, 0x9b, 0x56, 0x6a, 0x49, 0x43, 0xfd, 0xdc, 0x70,
	0x75, 0x32, 0x2f, 0x65, 0x29, 0xad, 0x73, 0x67, 0xaa, 0x1e, 0x5e, 0x7c, 0xfa, 0x64, 0xba, 0x70,
	0x23, 0xf4, 0x98, 0xf8, 0x55, 0x01, 0xde, 0xb9, 0x77, 0x15, 0x2f, 0xa3, 0xfd, 0xfb, 0x99, 0x9f,
	0x3e, 0x64, 0xe8, 0x50, 0x4a, 0x02, 0xc1, 0xd6, 0x1c, 0x7c, 0x43, 0x32, 0x5b, 0xd3, 0x53, 0x12,
	0x57, 0x42, 0x69, 0x26, 0x72, 0xae, 0x60, 0x8c, 0x20, 0xc8, 0x9c, 0x41, 0xaf, 0xc9, 0x51, 0xd7,
	0x14, 0x4c, 0xf3, 0x22, 0xfd, 0x0d, 0x05, 0x36, 0x74, 0xe0, 0x9b, 0x6c, 0xdb, 0x09, 0x51, 0x89,
	0xd2, 0x65, 0xc3, 0x3e, 0xfb, 0xd7, 0xa7, 0x37, 0x64, 0xd6, 0xca, 0xba, 0x5e, 0xb1, 0xfc, 0xc9,
	0x85, 0x23, 0x1b, 0x3e, 0x04, 0x74, 0x4e, 0x42, 0xfc, 0xc2, 0x42, 0xc1, 0xc4, 0x2e, 0xde, 0x37,
	0x66, 0xf3, 0xbc, 0xee, 0x94, 0xe6, 0x6d, 0x5a, 0xc0, 0x3f, 0x4b, 0x9c, 0x81, 0x37, 0x88, 0x70,
	0x5c, 0x77, 0x0a, 0x62, 0x8b, 0x86, 0x8e, 0x02, 0x99, 0xe4, 0x2d, 0x37, 0x9b, 0x03, 0x41, 0x30,
	0xce, 0x7e, 0x5a, 0x43, 0x86, 0x7f, 0x82, 0x69, 0x4f, 0x86, 0xd6, 0xdc, 0x6d, 0x2d, 0x0b, 0x0e,
	0xff, 0xfb, 0xbb, 0x99, 0x7a, 0x79, 0xb9, 0xd9, 0x25, 0xa3, 0xed, 0x2e, 0xf1, 0x3e, 0x50, 0x5f,
	0xa8, 0x97, 0x7d, 0xe2, 0xbd, 0xa2, 0x36, 0xa8, 0x37, 0xd4, 0x16, 0xf5, 0x38, 0x5a, 0x45, 0xf6,
	0x89, 0xee, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x0a, 0xe4, 0x09, 0xf3, 0xd4, 0x01, 0x00, 0x00,
}
