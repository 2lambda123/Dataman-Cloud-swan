// Code generated by protoc-gen-gogo.
// source: update.proto
// DO NOT EDIT!

package types

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// skipping weak import gogoproto "gogoproto"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import strconv "strconv"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type UpdatePolicy struct {
	UpdateDelay  int32  `protobuf:"varint,1,opt,name=updateDelay,proto3" json:"updateDelay,omitempty"`
	MaxRetries   int32  `protobuf:"varint,2,opt,name=maxRetries,proto3" json:"maxRetries,omitempty"`
	MaxFailovers int32  `protobuf:"varint,3,opt,name=maxFailovers,proto3" json:"maxFailovers,omitempty"`
	Action       string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
}

func (m *UpdatePolicy) Reset()                    { *m = UpdatePolicy{} }
func (m *UpdatePolicy) String() string            { return proto.CompactTextString(m) }
func (*UpdatePolicy) ProtoMessage()               {}
func (*UpdatePolicy) Descriptor() ([]byte, []int) { return fileDescriptorUpdate, []int{0} }

func init() {
	proto.RegisterType((*UpdatePolicy)(nil), "types.UpdatePolicy")
}
func (this *UpdatePolicy) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdatePolicy)
	if !ok {
		that2, ok := that.(UpdatePolicy)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdatePolicy")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdatePolicy but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdatePolicy but is not nil && this == nil")
	}
	if this.UpdateDelay != that1.UpdateDelay {
		return fmt.Errorf("UpdateDelay this(%v) Not Equal that(%v)", this.UpdateDelay, that1.UpdateDelay)
	}
	if this.MaxRetries != that1.MaxRetries {
		return fmt.Errorf("MaxRetries this(%v) Not Equal that(%v)", this.MaxRetries, that1.MaxRetries)
	}
	if this.MaxFailovers != that1.MaxFailovers {
		return fmt.Errorf("MaxFailovers this(%v) Not Equal that(%v)", this.MaxFailovers, that1.MaxFailovers)
	}
	if this.Action != that1.Action {
		return fmt.Errorf("Action this(%v) Not Equal that(%v)", this.Action, that1.Action)
	}
	return nil
}
func (this *UpdatePolicy) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdatePolicy)
	if !ok {
		that2, ok := that.(UpdatePolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.UpdateDelay != that1.UpdateDelay {
		return false
	}
	if this.MaxRetries != that1.MaxRetries {
		return false
	}
	if this.MaxFailovers != that1.MaxFailovers {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	return true
}
func (this *UpdatePolicy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&types.UpdatePolicy{")
	s = append(s, "UpdateDelay: "+fmt.Sprintf("%#v", this.UpdateDelay)+",\n")
	s = append(s, "MaxRetries: "+fmt.Sprintf("%#v", this.MaxRetries)+",\n")
	s = append(s, "MaxFailovers: "+fmt.Sprintf("%#v", this.MaxFailovers)+",\n")
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringUpdate(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringUpdate(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func (m *UpdatePolicy) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpdatePolicy) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UpdateDelay != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintUpdate(data, i, uint64(m.UpdateDelay))
	}
	if m.MaxRetries != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintUpdate(data, i, uint64(m.MaxRetries))
	}
	if m.MaxFailovers != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintUpdate(data, i, uint64(m.MaxFailovers))
	}
	if len(m.Action) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintUpdate(data, i, uint64(len(m.Action)))
		i += copy(data[i:], m.Action)
	}
	return i, nil
}

func encodeFixed64Update(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Update(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintUpdate(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedUpdatePolicy(r randyUpdate, easy bool) *UpdatePolicy {
	this := &UpdatePolicy{}
	this.UpdateDelay = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.UpdateDelay *= -1
	}
	this.MaxRetries = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.MaxRetries *= -1
	}
	this.MaxFailovers = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.MaxFailovers *= -1
	}
	this.Action = randStringUpdate(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyUpdate interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneUpdate(r randyUpdate) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringUpdate(r randyUpdate) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneUpdate(r)
	}
	return string(tmps)
}
func randUnrecognizedUpdate(r randyUpdate, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldUpdate(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldUpdate(data []byte, r randyUpdate, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateUpdate(data, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		data = encodeVarintPopulateUpdate(data, uint64(v2))
	case 1:
		data = encodeVarintPopulateUpdate(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateUpdate(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateUpdate(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateUpdate(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateUpdate(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *UpdatePolicy) Size() (n int) {
	var l int
	_ = l
	if m.UpdateDelay != 0 {
		n += 1 + sovUpdate(uint64(m.UpdateDelay))
	}
	if m.MaxRetries != 0 {
		n += 1 + sovUpdate(uint64(m.MaxRetries))
	}
	if m.MaxFailovers != 0 {
		n += 1 + sovUpdate(uint64(m.MaxFailovers))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovUpdate(uint64(l))
	}
	return n
}

func sovUpdate(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUpdate(x uint64) (n int) {
	return sovUpdate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UpdatePolicy) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateDelay", wireType)
			}
			m.UpdateDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.UpdateDelay |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRetries", wireType)
			}
			m.MaxRetries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.MaxRetries |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFailovers", wireType)
			}
			m.MaxFailovers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.MaxFailovers |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpdate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpdate(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpdate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUpdate(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUpdate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUpdate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUpdate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUpdate
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUpdate
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUpdate(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUpdate = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUpdate   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("update.proto", fileDescriptorUpdate) }

var fileDescriptorUpdate = []byte{
	// 188 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x2d, 0x48, 0x49,
	0x2c, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2d, 0xa9, 0x2c, 0x48, 0x2d, 0x96,
	0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x07, 0x8b, 0xe8, 0x83, 0x58, 0x10, 0x49, 0xa5, 0x1e, 0x46, 0x2e,
	0x9e, 0x50, 0xb0, 0xea, 0x80, 0xfc, 0x9c, 0xcc, 0xe4, 0x4a, 0x21, 0x05, 0x2e, 0x6e, 0x88, 0x6e,
	0x97, 0xd4, 0x9c, 0xc4, 0x4a, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xd6, 0x20, 0x64, 0x21, 0x21, 0x39,
	0x2e, 0xae, 0xdc, 0xc4, 0x8a, 0xa0, 0xd4, 0x92, 0xa2, 0xcc, 0xd4, 0x62, 0x09, 0x26, 0xb0, 0x02,
	0x24, 0x11, 0x21, 0x25, 0x2e, 0x1e, 0x20, 0xcf, 0x2d, 0x31, 0x33, 0x27, 0xbf, 0x2c, 0xb5, 0xa8,
	0x58, 0x82, 0x19, 0xac, 0x02, 0x45, 0x4c, 0x48, 0x8c, 0x8b, 0x2d, 0x31, 0xb9, 0x24, 0x33, 0x3f,
	0x4f, 0x82, 0x05, 0x28, 0xcb, 0x19, 0x04, 0xe5, 0x39, 0xa9, 0x9c, 0x78, 0x28, 0xc7, 0xf0, 0xe0,
	0xa1, 0x1c, 0xe3, 0x07, 0x20, 0xfe, 0x01, 0xc4, 0x2b, 0x1e, 0xc9, 0x31, 0xee, 0x00, 0xe2, 0x13,
	0x40, 0x7c, 0x01, 0x88, 0x1f, 0x00, 0x71, 0x04, 0x43, 0x12, 0x1b, 0xd8, 0xf5, 0xc6, 0x80, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x2c, 0x18, 0x61, 0x2b, 0xea, 0x00, 0x00, 0x00,
}
